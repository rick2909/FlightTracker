@using FlightTracker.Application.Dtos
@using Radzen
@namespace FlightTracker.Web.Components
@inject IJSRuntime JS

@code {
    [Parameter] public IEnumerable<MapFlightDto> MapFlights { get; set; } = Array.Empty<MapFlightDto>();
    // Backing field for live-bound textbox value
    private string? _search;
    private int _activeIndex = -1; // keyboard navigation index
    private List<string> _currentFiltered = new();
    private string? Search
    {
        get => _search;
        set
        {
            if (_search == value) return;
            _search = value;
            // Fire filtering immediately as user types
            _ = InvokeAsync(async () =>
            {
                await JS.InvokeVoidAsync("flightMapFilter", _search);
                StateHasChanged();
            });
        }
    }
    private List<string> suggestions = new();

    protected override void OnParametersSet()
    {
        suggestions = MapFlights
            .Select(f => $"{f.FlightNumber} {f.DepartureAirportCode}->{f.ArrivalAirportCode}")
            .Distinct()
            .OrderBy(s => s)
            .ToList();
    RebuildFiltered();
    }

    // Explicit input handler to avoid ChangeEventArgs->string mismatch issues seen earlier
    private Task OnInput(ChangeEventArgs e)
    {
        Search = e.Value?.ToString();
    _activeIndex = -1;
    RebuildFiltered();
        // Each input updates filter set (JS retains prior layers)
        return Task.CompletedTask;
    }

    private async Task OnKeyDown(KeyboardEventArgs e)
    {
        if (!_currentFiltered.Any()) return;
        if (e.Key == "ArrowDown")
        {
            _activeIndex = (_activeIndex + 1) % _currentFiltered.Count;
            StateHasChanged();
        }
        else if (e.Key == "ArrowUp")
        {
            _activeIndex = _activeIndex <= 0 ? _currentFiltered.Count - 1 : _activeIndex - 1;
            StateHasChanged();
        }
        else if (e.Key == "Enter")
        {
            if (_activeIndex >= 0 && _activeIndex < _currentFiltered.Count)
            {
                await Select(_currentFiltered[_activeIndex]);
            }
            else
            {
                await JS.InvokeVoidAsync("flightMapZoomToFiltered");
            }
        }
    }

    private IEnumerable<string> Filtered => string.IsNullOrWhiteSpace(_search)
        ? suggestions
        : suggestions.Where(s => s.Contains(_search!, StringComparison.OrdinalIgnoreCase)).Take(20);

    private void RebuildFiltered()
    {
        _currentFiltered = Filtered.ToList();
        if (_activeIndex >= _currentFiltered.Count) _activeIndex = -1;
    }
}

<div data-flight-map-search>
    <span class="flight-map__search-icon material-icons">search</span>
    <RadzenTextBox Value="@_search" @oninput="OnInput" @onkeydown="OnKeyDown" Placeholder="Search flights" class="flight-map__search-textbox" Style="width:100%;font-size:.75rem;line-height:1.2;" />
    @if (!string.IsNullOrEmpty(_search))
    {
        <button type="button" class="flight-map__search-clear" @onclick="Clear" aria-label="Clear search">&times;</button>
    }
    @if (!string.IsNullOrWhiteSpace(_search) && Filtered.Any())
    {
        <ul class="flight-map__search-dropdown" role="listbox" aria-label="Flight matches">
            @for (int i = 0; i < _currentFiltered.Count; i++)
            {
                var item = _currentFiltered[i];
                var active = i == _activeIndex ? " active" : string.Empty;
                <li role="option" class="@active" @onclick="(()=>Select(item))">@item</li>
            }
        </ul>
    }
</div>

@code {
    private async Task Select(string item)
    {
        _search = item;
        try {
            await JS.InvokeVoidAsync("flightMapFilter", _search);
            await JS.InvokeVoidAsync("flightMapZoomToSelection", _search);
        } catch (JSException) { }
        _activeIndex = -1;
        RebuildFiltered();
    }

    private async Task Clear()
    {
        _search = string.Empty;
        _activeIndex = -1;
        try { await JS.InvokeVoidAsync("flightMapFilter", (string?)null); } catch (JSException) { }
        RebuildFiltered();
    }
}
