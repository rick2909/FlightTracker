@using FlightTracker.Application.Dtos
@using FlightTracker.Domain.Enums
@using Radzen
@using Radzen.Blazor
@using TimeZoneConverter

@inherits ComponentBase

@code {
    [Parameter] public UserFlightDto Flight { get; set; } = default!;
    private bool expanded;
    private void ToggleExpanded() => expanded = !expanded;
    private string CardClass => $"rz-mb-2 rz-p-2 flight-card-compact {(expanded ? "expanded" : string.Empty)}";

    [Parameter] public EventCallback<UserFlightDto> OnEdit { get; set; }
    [Parameter] public EventCallback<UserFlightDto> OnDelete { get; set; }
    private async Task HandleEdit() => await OnEdit.InvokeAsync(Flight);
    private async Task HandleDelete() => await OnDelete.InvokeAsync(Flight);

    private static BadgeStyle GetClassBadgeStyle(FlightClass flightClass)
    {
        return flightClass switch
        {
            FlightClass.First => BadgeStyle.Warning,
            FlightClass.Business => BadgeStyle.Info,
            FlightClass.PremiumEconomy => BadgeStyle.Secondary,
            FlightClass.Economy => BadgeStyle.Primary,
            _ => BadgeStyle.Light
        };
    }

    private static BadgeStyle GetStatusBadgeStyle(bool didFly)
        => didFly ? BadgeStyle.Success : BadgeStyle.Danger;

    private static string didFlyText(bool didFly) => didFly ? "Completed" : "No Show";

    // Best-effort seat position inference from trailing seat letter.
    private static string GetSeatPositionLabel(string? seatNumber)
    {
        if (string.IsNullOrWhiteSpace(seatNumber)) return "-";
        var letter = seatNumber.Trim().LastOrDefault();
        if (!char.IsLetter(letter)) return "-";
        letter = char.ToUpperInvariant(letter);
        return letter switch
        {
            'A' or 'F' => "Window",
            'C' or 'D' => "Aisle",
            'B' or 'E' => "Middle",
            _ => "-"
        };
    }

    private static string ToLocalString(DateTime utc, string? timeZoneId)
    {
        if (string.IsNullOrWhiteSpace(timeZoneId))
        {
            return "-";
        }

        try
        {
            TimeZoneInfo tz;
            try
            {
                tz = TZConvert.GetTimeZoneInfo(timeZoneId);
            }
            catch
            {
                tz = TimeZoneInfo.FindSystemTimeZoneById(timeZoneId);
            }

            var utcKind = DateTime.SpecifyKind(utc, DateTimeKind.Utc);
            var local = TimeZoneInfo.ConvertTimeFromUtc(utcKind, tz);
            var offset = tz.GetUtcOffset(local);
            var sign = offset < TimeSpan.Zero ? "-" : "+";
            var hh = Math.Abs(offset.Hours).ToString("00");
            var mm = Math.Abs(offset.Minutes).ToString("00");

            return $"{local:MMM dd, yyyy HH:mm} (UTC{sign}{hh}:{mm})";
        }
        catch
        {
            return "-";
        }
    }
}

<RadzenCard Variant="Variant.Outlined" class="@CardClass" Style="width: 100%; overflow: hidden;">
    <!-- Header: top meta row and route row; click anywhere on left to open (no close) -->
    <div class="header-row">
    <div class="left" @onclick="ToggleExpanded" role="button" tabindex="0" title="Toggle details">
            <RadzenIcon Icon="flight" class="rz-mr-1" />
            <div class="left-content">
                @if (!string.IsNullOrWhiteSpace(Flight.OperatingAirlineIataCode) || !string.IsNullOrWhiteSpace(Flight.OperatingAirlineIcaoCode) || !string.IsNullOrWhiteSpace(Flight.OperatingAirlineName))
                {
                    <span class="rz-text">
                        <strong>@(Flight.OperatingAirlineIataCode ?? Flight.OperatingAirlineIcaoCode)</strong>
                        @if (!string.IsNullOrWhiteSpace(Flight.OperatingAirlineName))
                        {
                            <span class="rz-ml-1">@Flight.OperatingAirlineName</span>
                        }
                    </span>
                    <span class="sep">|</span>
                }
                <span class="rz-text">@Flight.FlightNumber</span>
                <span class="sep">|</span>
                <span>@Flight.DepartureTimeUtc.ToString("yyyy-MM-dd")</span>
                <span class="sep">|</span>
                <span>Seat: <strong>@(string.IsNullOrWhiteSpace(Flight.SeatNumber) ? "-" : Flight.SeatNumber)</strong></span>
                
                <!-- Route line -->
                <div class="route-line">
                    <div class="route-content">
                        <strong>@(Flight.DepartureIataCode ?? Flight.DepartureIcaoCode ?? Flight.DepartureAirportCode)</strong>
                        @if (!string.IsNullOrWhiteSpace(Flight.DepartureIataCode) && !string.IsNullOrWhiteSpace(Flight.DepartureIcaoCode))
                        {
                            <span class="rz-text-secondary rz-ml-1">(@Flight.DepartureIcaoCode)</span>
                        }
                    </div>
                    <span class="arrow">→</span>
                    <div class="route-content">
                        <strong>@(Flight.ArrivalIataCode ?? Flight.ArrivalIcaoCode ?? Flight.ArrivalAirportCode)</strong>
                        @if (!string.IsNullOrWhiteSpace(Flight.ArrivalIataCode) && !string.IsNullOrWhiteSpace(Flight.ArrivalIcaoCode))
                        {
                            <span class="rz-text-secondary rz-ml-1">(@Flight.ArrivalIcaoCode)</span>
                        }
                    </div>
                    <span class="sep">|</span>
                    <span class="rz-text">
                        @if (Flight.Aircraft is not null)
                        {
                            @(string.Join(" · ", new[] {
                                string.IsNullOrWhiteSpace(Flight.Aircraft.Model) ? null : Flight.Aircraft.Model,
                                Flight.Aircraft.Manufacturer.ToString(),
                                string.IsNullOrWhiteSpace(Flight.Aircraft.Registration) ? null : $"Reg {Flight.Aircraft.Registration}"
                            }.Where(x => x is not null)))
                        }
                        else
                        {
                            <span>-</span>
                        }
                    </span>
                </div>
            </div>
        </div>
        <div class="right">
            <RadzenBadge Pill="true" BadgeStyle="@GetStatusBadgeStyle(Flight.DidFly)" Text="@(didFlyText(Flight.DidFly))" />
            <button type="button" class="expand-btn" @onclick="ToggleExpanded" aria-expanded="@expanded" title="Toggle details">
                <RadzenIcon Icon="expand_more" class="expand-icon" />
            </button>
        </div>
    </div>

    @if (expanded)
    {
        <div class="rz-mt-2">
            <FlightDetailsCard Flight="@Flight" />
        </div>

    <div class="rz-mt-2 footer-row">
        <div class="spacer"></div>
        <RadzenButton Text="Edit" Icon="edit" ButtonStyle="ButtonStyle.Light" Size="ButtonSize.Medium" Click="@HandleEdit" />
        <RadzenButton Text="Delete" Icon="delete" ButtonStyle="ButtonStyle.Danger" Size="ButtonSize.Medium" class="rz-ml-1" Click="@HandleDelete" />
    </div>
    }
</RadzenCard>
