@using FlightTracker.Application.Dtos
@using FlightTracker.Domain.Enums
@using Radzen
@using Radzen.Blazor
@using TimeZoneConverter

@if (Flights is null || !Flights.Any())
{
    <div class="rz-p-4 rz-text-center rz-text-secondary">No flights.</div>
}
else
{
    <RadzenDataList Data="@FlightsOrdered"
                    TItem="UserFlightDto"
                    AllowPaging="true"
                    PageSize="20"
                    PagerHorizontalAlign="HorizontalAlign.Left"
                    ShowPagingSummary="true"
                    WrapItems="false">
        <Template Context="flight">
            <RadzenCard Variant="Variant.Outlined" class="rz-mb-3 rz-p-3 user-flights-list" Style="width: 100%; overflow: hidden;">
                <div class="desktop-content">
                <RadzenRow Gap="0">
                    <!-- Left block: Date + Flight on left, Seat/Class/Position on right -->
            <RadzenColumn Size="12" SizeMD="4" SizeLG="4" class="rz-p-4" Style="background-color: var(--rz-secondary-lighter); border-radius: 12px;">
                        <RadzenRow>
                <RadzenColumn Size="12" SizeSM="6" SizeMD="6">
                                <RadzenText TextStyle="TextStyle.H6" TagName="TagName.H5">@flight.DepartureTimeUtc.ToString("MMM dd, yyyy")</RadzenText>
                                <div class="rz-mt-2">
                                    <RadzenText TextStyle="TextStyle.Body1">@flight.FlightNumber</RadzenText>
                                </div>
                            </RadzenColumn>
                <RadzenColumn Size="12" SizeSM="6" SizeMD="6" class="rz-text-align-start rz-text-align-md-end">
                                <div class="rz-mb-2">
                                    <RadzenText TextStyle="TextStyle.Caption">Seat</RadzenText>
                                    <div>
                                        <RadzenBadge Shade="Shade.Lighter" BadgeStyle="BadgeStyle.Secondary" Text="@(string.IsNullOrWhiteSpace(flight.SeatNumber) ? "-" : flight.SeatNumber)" />
                                    </div>
                                </div>
                                <div class="rz-mb-2">
                                    <RadzenText TextStyle="TextStyle.Caption">Class</RadzenText>
                                    <div>
                                        <RadzenBadge Pill="true" BadgeStyle="@GetClassBadgeStyle(flight.FlightClass)" Text="@flight.FlightClass.ToString()" />
                                    </div>
                                </div>
                                <div>
                                    <RadzenText TextStyle="TextStyle.Caption">Seat pos.</RadzenText>
                                    <div>
                                        <RadzenBadge Shade="Shade.Lighter" BadgeStyle="BadgeStyle.Info" Text="@GetSeatPositionLabel(flight.SeatNumber)" />
                                    </div>
                                </div>
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenColumn>

                    <!-- Middle: Route details; code + name on one line, city below; time moved here under Departure -->
            <RadzenColumn Size="12" SizeMD="5" SizeLG="5" class="rz-p-2">
                        <RadzenRow Gap="0">
                <RadzenColumn Size="12" SizeSM="6" SizeMD="6">
                                <RadzenText TextStyle="TextStyle.Overline">Departure</RadzenText>
                                <div><strong>@flight.DepartureAirportCode</strong> @(" ") <span>@flight.DepartureAirportName</span></div>
                                <div class="rz-text-secondary">@flight.DepartureCity</div>
                                <div class="rz-text-secondary rz-mt-1">@flight.DepartureTimeUtc.ToString("MMM dd, yyyy HH:mm") UTC</div>
                                <div class="rz-text-secondary">Local: @ToLocalString(flight.DepartureTimeUtc, flight.DepartureTimeZoneId)</div>
                            </RadzenColumn>
                <RadzenColumn Size="12" SizeSM="6" SizeMD="6">
                                <RadzenText TextStyle="TextStyle.Overline">Arrival</RadzenText>
                                <div><strong>@flight.ArrivalAirportCode</strong> @(" ") <span>@flight.ArrivalAirportName</span></div>
                                <div class="rz-text-secondary">@flight.ArrivalCity</div>
                                <div class="rz-text-secondary rz-mt-1">@flight.ArrivalTimeUtc.ToString("MMM dd, yyyy HH:mm") UTC</div>
                                <div class="rz-text-secondary">Local: @ToLocalString(flight.ArrivalTimeUtc, flight.ArrivalTimeZoneId)</div>
                            </RadzenColumn>
                        </RadzenRow>
                    </RadzenColumn>

                    <!-- Booked/Created separate column -->
                    <RadzenColumn Size="12" SizeMD="2" SizeLG="2" class="rz-p-2">
                        <RadzenText TextStyle="TextStyle.Overline">Booked/Created</RadzenText>
                        <div class="rz-mt-1">
                            <RadzenText TextStyle="TextStyle.Body2">Booked</RadzenText>
                            <div class="rz-text-secondary">@flight.BookedOnUtc.ToString("MMM dd, yyyy")</div>
                        </div>
                    </RadzenColumn>

                    <!-- Right: Status + notes icon -->
                    <RadzenColumn Size="12" SizeMD="1" SizeLG="1" class="rz-p-2 rz-text-align-start rz-text-align-lg-end">
                        <div class="rz-mb-2">
                            <RadzenBadge Pill="true" BadgeStyle="@GetStatusBadgeStyle(flight.DidFly)" Text="@(didFlyText(flight.DidFly))" />
                        </div>
                        <div>
                            @if (!string.IsNullOrWhiteSpace(flight.Notes))
                            {
                                <span title="@flight.Notes"><i class="fas fa-comment-alt" style="color:#17a2b8"></i></span>
                            }
                        </div>
                    </RadzenColumn>
                </RadzenRow>

                <!-- Aircraft info row -->
                <RadzenRow class="rz-mt-2 rz-pt-2 rz-border-top-1">
                    <RadzenColumn Size="12" class="rz-text-secondary">
                        <RadzenText TextStyle="TextStyle.Overline">Aircraft</RadzenText>
                        <div>
                            @if (flight.Aircraft is not null)
                            {
                                <span>
                                    @(string.Join(" · ", new[] {
                                        string.IsNullOrWhiteSpace(flight.Aircraft.Registration) ? null : $"Reg {flight.Aircraft.Registration}",
                                        string.IsNullOrWhiteSpace(flight.Aircraft.Model) ? null : flight.Aircraft.Model,
                                        flight.Aircraft.Manufacturer.ToString()
                                    }.Where(x => x is not null)))
                                </span>
                            }
                            else
                            {
                                <span>-</span>
                            }
                        </div>
                    </RadzenColumn>
                </RadzenRow>
                </div>

                <div class="mobile-content">
                    <div class="flight-mobile">
                        <div class="top">
                            <span class="date">@flight.DepartureTimeUtc.ToString("MMM dd")</span>
                            <span class="number">@flight.FlightNumber</span>
                            <span class="status">
                                <RadzenBadge Pill="true" BadgeStyle="@GetStatusBadgeStyle(flight.DidFly)" Text="@(didFlyText(flight.DidFly))" />
                            </span>
                        </div>
                        <div class="route"><strong>@flight.DepartureAirportCode</strong> &rarr; <strong>@flight.ArrivalAirportCode</strong></div>
                        <div class="times rz-text-secondary">
                            <span>@ToLocalString(flight.DepartureTimeUtc, flight.DepartureTimeZoneId)</span>
                            <span class="sep"> · </span>
                            <span>@ToLocalString(flight.ArrivalTimeUtc, flight.ArrivalTimeZoneId)</span>
                        </div>
                        <div class="meta">
                            <RadzenBadge Shade="Shade.Lighter" BadgeStyle="BadgeStyle.Secondary" Text="@(string.IsNullOrWhiteSpace(flight.SeatNumber) ? "-" : flight.SeatNumber)" />
                            <RadzenBadge Pill="true" class="rz-ml-2" BadgeStyle="@GetClassBadgeStyle(flight.FlightClass)" Text="@flight.FlightClass.ToString()" />
                            <RadzenBadge Shade="Shade.Lighter" Pill="true" class="rz-ml-2" BadgeStyle="BadgeStyle.Info" Text="@GetSeatPositionLabel(flight.SeatNumber)" />
                        </div>
                        @if (!string.IsNullOrWhiteSpace(flight.Notes))
                        {
                            <div class="notes rz-text-secondary rz-mt-1"><i class="fas fa-comment-alt" style="color:#17a2b8"></i> @flight.Notes</div>
                        }
                        <details class="more rz-mt-2">
                            <summary>More</summary>
                            <div class="rz-mt-2">
                                <div class="rz-mb-1"><strong>Departure:</strong> @flight.DepartureAirportName, @flight.DepartureCity</div>
                                <div class="rz-mb-1"><strong>Arrival:</strong> @flight.ArrivalAirportName, @flight.ArrivalCity</div>
                                <div class="rz-mb-1"><strong>Booked:</strong> @flight.BookedOnUtc.ToString("MMM dd, yyyy")</div>
                                <div class="rz-mb-1"><strong>Aircraft:</strong>
                                    @if (flight.Aircraft is not null)
                                    {
                                        <span>
                                            @(string.Join(" · ", new[] {
                                                string.IsNullOrWhiteSpace(flight.Aircraft.Registration) ? null : $"Reg {flight.Aircraft.Registration}",
                                                string.IsNullOrWhiteSpace(flight.Aircraft.Model) ? null : flight.Aircraft.Model,
                                                flight.Aircraft.Manufacturer.ToString()
                                            }.Where(x => x is not null)))
                                        </span>
                                    }
                                    else
                                    {
                                        <span>-</span>
                                    }
                                </div>
                            </div>
                        </details>
                    </div>
                </div>
            </RadzenCard>
        </Template>
    </RadzenDataList>
}

@code {
    [Parameter]
    public IEnumerable<UserFlightDto>? Flights { get; set; }

    private IEnumerable<UserFlightDto> FlightsOrdered =>
        (Flights ?? Enumerable.Empty<UserFlightDto>())
            .OrderByDescending(f => f.DepartureTimeUtc);

    private static BadgeStyle GetClassBadgeStyle(FlightClass flightClass)
    {
        return flightClass switch
        {
            FlightClass.First => BadgeStyle.Warning,
            FlightClass.Business => BadgeStyle.Info,
            FlightClass.PremiumEconomy => BadgeStyle.Secondary,
            FlightClass.Economy => BadgeStyle.Primary,
            _ => BadgeStyle.Light
        };
    }

    private static BadgeStyle GetStatusBadgeStyle(bool didFly)
        => didFly ? BadgeStyle.Success : BadgeStyle.Danger;

    private static string didFlyText(bool didFly) => didFly ? "Completed" : "No Show";

    // Best-effort seat position inference from trailing seat letter. later implemented to get via seat map or external api
    private static string GetSeatPositionLabel(string? seatNumber)
    {
        if (string.IsNullOrWhiteSpace(seatNumber)) return "-";
        var letter = seatNumber.Trim().LastOrDefault();
        if (!char.IsLetter(letter)) return "-";
        letter = char.ToUpperInvariant(letter);
        return letter switch
        {
            'A' or 'F' => "Window",
            'C' or 'D' => "Aisle",
            'B' or 'E' => "Middle",
            _ => "-"
        };
    }

    private static string ToLocalString(DateTime utc, string? timeZoneId)
    {
        if (string.IsNullOrWhiteSpace(timeZoneId))
        {
            return "-";
        }

        try
        {
            TimeZoneInfo tz;
            try
            {
                // Prefer IANA resolution first (timeapi.io returns IANA IDs)
                tz = TZConvert.GetTimeZoneInfo(timeZoneId);
            }
            catch
            {
                // Fallback to Windows registry IDs
                tz = TimeZoneInfo.FindSystemTimeZoneById(timeZoneId);
            }

            var utcKind = DateTime.SpecifyKind(utc, DateTimeKind.Utc);
            var local = TimeZoneInfo.ConvertTimeFromUtc(utcKind, tz);
            var offset = tz.GetUtcOffset(local);
            var sign = offset < TimeSpan.Zero ? "-" : "+";
            var hh = Math.Abs(offset.Hours).ToString("00");
            var mm = Math.Abs(offset.Minutes).ToString("00");

            return $"{local:MMM dd, yyyy HH:mm} (UTC{sign}{hh}:{mm})";
        }
        catch
        {
            return "-";
        }
    }
}

